# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RIlM-_xKmT__rB7MI3dvKuDt9aGaa-SO
"""

import numpy as np
import random
import timeit
import pandas as pd
import matplotlib.pyplot as plt

x10 = np.array(random.sample(range(1000), 10))
y10 = np.array(random.sample(range(1000), 10))

x50 = np.array(random.sample(range(1000), 50))
y50 = np.array(random.sample(range(1000), 50))

x100 = np.array(random.sample(range(1000), 100))
y100 = np.array(random.sample(range(1000), 100))

#Наивное скалярное произведение.
def naiveskmult(x, y):
    assert x.ndim == 1 and y.ndim == 1
    assert x.size == y.size
    result = 0
    for i in range(x.size):
        result += x[i]*y[i]
    return result

#Произведение NumPy.
def scalar(x, y):
    assert x.ndim == 1 and y.ndim == 1
    assert x.size == y.size
    return np.dot(x, y)

#Функция возвращает время выполнения функции с параметрами x, y.
def time_returns(function, x, y):
    startTime = timeit.default_timer()
    naiveskmult(x, y)
    delta = timeit.default_timer() - startTime
    return delta

#Значения оси ординат.
Naive_time = np.array([time_returns(naiveskmult, x10, y10), time_returns(naiveskmult, x50, y50), time_returns(naiveskmult, x100, y100)])
NumPy_time = np.array([time_returns(scalar, x10, y10), time_returns(scalar, x50, y50), time_returns(scalar, x100, y100)])

#Значения оси абцисс.
x_value = [x10.size, x50.size, x100.size]

#Построение графика.
plt.title("Сравнение времени наивного скалярного произведения и numpy")
plt.xlabel("Длина вектора")
plt.ylabel("Врямя выполнения")

plt.grid()

#Oформление графика
plt.plot(x_value, Naive_time, '-', color = 'g', label = "Naive")
plt.plot(x_value, NumPy_time, '-', color = 'y', label = "NumPy")

plt.legend(loc = "best")

#Сохраняем результаты в DataFrame(вывод таблицы).
result_s = pd.DataFrame({
    "Length": x_value,
    "Naive time": Naive_time,
    "NumPy time": NumPy_time
})
print(result_s)